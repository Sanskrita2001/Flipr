{"version":3,"sources":["Components/Task_1.js","Components/Task_2.js","Components/Task_3A.js","Components/Task_3B.js","App.js","serviceWorker.js","index.js"],"names":["Task_1","useState","dataList","setData","getdata","a","axios","get","response","console","log","data","contacts","regional","error","useEffect","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","classes","makeStyles","table","minWidth","useStyles","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","map","row","key","name","scope","loc","number","Task_2","notifications","title","link","Task_3A","state","ruralHospitals","ruralBeds","urbanHospitals","urbanBeds","totalHospitals","totalBeds","Task_3B","medicalColleges","city","ownership","admissionCapacity","hospitalBeds","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.acf38889.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Task_1() {\r\n  const [dataList, setData] = useState([]);\r\n  const getdata = async () => {\r\n    const url = \"https://api.rootnet.in/covid19-in/contacts\";\r\n    try {\r\n      const response = await axios.get(url);\r\n      console.log(response);\r\n      await setData(response.data.data.contacts.regional);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getdata();\r\n  }, []);\r\n\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Location</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Number</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataList.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.loc}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.number}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default Task_1;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Task_2() {\r\n  const [dataList, setData] = useState([]);\r\n  const getdata = async () => {\r\n    const url = \"https://api.rootnet.in/covid19-in/notifications\";\r\n    try {\r\n      const response = await axios.get(url);\r\n      console.log(response);\r\n      await setData(response.data.data.notifications);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getdata();\r\n  }, []);\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Title</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Link</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataList.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.title}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.link}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default Task_2;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Task_3A() {\r\n  const [dataList, setData] = useState([]);\r\n  const getdata = async () => {\r\n    const url = \"https://api.rootnet.in/covid19-in/hospitals/beds\";\r\n    try {\r\n      const response = await axios.get(url);\r\n      console.log(response);\r\n      await setData(response.data.data.regional);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getdata();\r\n  }, []);\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>State Name</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Rural hospitals</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Rural Beds</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Urban hospitals</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Urban beds</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Total hospitals</StyledTableCell>\r\n            <StyledTableCell align=\"right\">\r\n              Total beds(State wise)\r\n            </StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataList.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.state}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                {row.ruralHospitals}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.ruralBeds}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                {row.urbanHospitals}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.urbanBeds}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">\r\n                {row.totalHospitals}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalBeds}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default Task_3A;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Task_3B() {\r\n  const [dataList, setData] = useState([]);\r\n  const getdata = async () => {\r\n    const url = \"https://api.rootnet.in/covid19-in/hospitals/medical-colleges\";\r\n    try {\r\n      const response = await axios.get(url);\r\n      console.log(response);\r\n      await setData(response.data.data.medicalColleges);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getdata();\r\n  }, []);\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>State Name</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Institute Name</StyledTableCell>\r\n            <StyledTableCell align=\"right\">City</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Type</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Admission Capacity</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Hospital Beds</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {dataList.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.state}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.city}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.ownership}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                {row.admissionCapacity}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                {row.hospitalBeds}\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default Task_3B;\r\n","import React from \"react\";\nimport Task_1 from \"./Components/Task_1\";\nimport Task_2 from \"./Components/Task_2\";\nimport Task_3A from \"./Components/Task_3A\";\nimport Task_3B from \"./Components/Task_3B\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Task_1 />\n      <Task_2 />\n      <Task_3A />\n      <Task_3B />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}